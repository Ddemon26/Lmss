name: Release Tagged

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: 1
  DOTNET_CLI_TELEMETRY_OPTOUT: 1

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore
        run: dotnet restore

      - name: Build Release
        run: dotnet build --no-restore -c Release

      - name: Publish for multiple runtimes
        run: |
          dotnet publish Lmss/Lmss.csproj -c Release -f net8.0 -o publish/net8.0
          dotnet publish Lmss/Lmss.csproj -c Release -f netstandard2.0 -o publish/netstandard2.0
          
          # Create CLI builds if they exist
          if [ -d "Lmss.Cli" ]; then
            dotnet publish Lmss.Cli/Lmss.Cli.csproj -c Release -r win-x64 --self-contained -o publish/cli-win-x64
            dotnet publish Lmss.Cli/Lmss.Cli.csproj -c Release -r linux-x64 --self-contained -o publish/cli-linux-x64
            dotnet publish Lmss.Cli/Lmss.Cli.csproj -c Release -r osx-x64 --self-contained -o publish/cli-osx-x64
          fi

      - name: Create release archives
        run: |
          cd publish
          zip -r ../lmssharp-net8.0.zip net8.0/
          zip -r ../lmssharp-netstandard2.0.zip netstandard2.0/
          
          if [ -d "cli-win-x64" ]; then
            zip -r ../lmssharp-cli-win-x64.zip cli-win-x64/
            tar -czf ../lmssharp-cli-linux-x64.tar.gz cli-linux-x64/
            tar -czf ../lmssharp-cli-osx-x64.tar.gz cli-osx-x64/
          fi

      - name: Create Release and Upload Assets
        run: |
          gh release create ${{ github.ref_name }} \
            --title "Release ${{ github.ref_name }}" \
            --generate-notes \
            lmssharp-*.zip lmssharp-*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
